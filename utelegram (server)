import ujson, ure, time, gc, _thread
from machine import Timer
from lib import urequests

class Bot():
    '''
    Base class for interacting with telegram api
    '''

    def __init__(self, token):
        self.url = 'https://api.telegram.org/bot' + token
        self.last_update = 0
        self.command_handlers = {}
        self.conversation_handlers = []

        self._get_updates()

    def _get_updates(self):
        '''
        Gets all the updates from the telegram api and stores
        latest id for next iteration
        '''
        parameters = {
            'offset': self.last_update + 1,
            'timeout': 2,
            'allowed_updates': ['messages']
            }
        
        gc.threshold(-1)

        try:
            response = urequests.post(self.url + '/getUpdates', json=parameters)
            data = response.json()
            response.close()
            
            if data['result']:
                self.last_update = data['result'][-1]['update_id'] #storing last update id
                return [Update(self, update) for update in data['result']]
    
            return None

        except Exception as e:
            
            print('_get_updates: ',e)
            return  None

    def _handle_update(self, update):
        '''
        Function that chooses the right function to handle the update, 
        based on the previously defined handlers
        '''
        text = update.message['text']

        if update.is_callback:
            self.callback_handlers[update.callback_data](update)



        if text.startswith('/'): #is a command
            #get first word (useful for future implementation of commands with arguments)
            command = text.split(' ')[0].replace('/','')
            
            for c in self.conversation_handlers:
                if command in c.steps[c.active][0].keys():
                    next_step = c.steps[c.active][0][command](update)
                    c.go_to_step(next_step)
                    return command

            if command in set(self.command_handlers.keys()):
                self.command_handlers[command](update)
                return command
        else:
                
            for c in self.conversation_handlers:
                    for expression in c.steps[c.active][1].keys():
                        if ure.match(expression, text):
                            next_step = c.steps[c.active][1][expression](update)
                            c.go_to_step(next_step)
                            return
                            
            for expression in set(self.message_handlers.keys()):
                #handling messagges
                if ure.match(expression, text):
                    self.message_handlers[expression](update)
                    return

    def _read(self):
        '''
        main bot read function
        '''
        updates = self._get_updates()
        text = ''
        

        if updates:
            for update in updates:
                self._handle_update(update)
                text = self._handle_update(update)
        
        gc.collect()
        return text

    def add_command_handler(self, command):
        '''
        Decorator to add a command handler, (write command without '/' as argument)
        '''

        def decorator(function):
            self.command_handlers[command] = function

        return decorator


    def send_message(self, chat_id, text, parse_mode='MarkdownV2', reply_markup=None):

        parameters = {
            'chat_id': chat_id,
            'text': text.replace('.', '\.'),
            'parse_mode': parse_mode
        }

        if reply_markup:
            parameters['reply_markup'] = reply_markup.data

        try:
            message = urequests.post(self.url + '/sendMessage', json=parameters)
            assert message
            message.close()

        except Exception:
            print('message not sent')


    def update_message(self, chat_id, message_id, text, parse_mode='MarkdownV2', reply_markup=None):

        parameters = {
            'chat_id': chat_id,
            'message_id' : message_id,
            'text': text,
            'parse_mode': parse_mode,
            
        }

        if reply_markup:
            parameters['reply_markup'] = reply_markup.data

        try:
            message = urequests.post(self.url + '/editMessageText', json=parameters)
            print(message.text)
            assert message
            message.close()

        except Exception:
            print('update not sent')
            
class Update():
    '''
    class with basic methods for updates
    '''

    def __init__(self, b, update):
        self.update_id = update['update_id']
        self.bot = b
        self.is_callback = False
        self.callback_data = ""
        try:
            if update['callback_query']:
                    print("IS A CALLBACK")
                    self.is_callback = True
                    self.message = update['callback_query']['message']
                    self.callback_data = update['callback_query']['data']


        except KeyError as e:
            print("Not a Callback")
            self.message = update['message']
            
            

    def reply(self, text, parse_mode='MarkdownV2', reply_markup=None):
        self.bot.send_message(self.message['chat']['id'], text, parse_mode=parse_mode, reply_markup=reply_markup)

    def edit(self,text, parse_mode='MarkdownV2', reply_markup=None):
        self.bot.update_message(self.message['chat']['id'] , self.message['message_id'], text, parse_mode= parse_mode , reply_markup= reply_markup)
